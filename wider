#!/usr/bin/env bash

[[ -n $DEBUG ]] && set -x

set -eou pipefail
IFS=$'\n\t'

SELF_CMD="$0"
OUT_FORMAT='["POD","NODE","PROVIDER ID"], (.[] | [.metadata.name, .node.metadata.name, .node.spec.providerID])'

check_command() {
  if ! command -v $1 2>&1 >/dev/null
  then
      exit_err "error this plugin requires $1. Please check that your PATH contains $1"
  fi
}

exit_err() {
  echo >&2 "${1}"
  exit 1
}

get_nodes() {
  $KUBECTL get nodes -o json | jq '.items' > $1
}

get_pods() {
  local TMP_FILE=$1
  shift
  $KUBECTL get pods -o json $@ | jq '.items' > $TMP_FILE
}

set_out_format() {
  local output
  local columns
  local values
  output=$(echo $1 | sed 's/custom-columns=//g')
  IFS=',' read -r -a array <<< "$output"
    
  for element in "${array[@]}"
  do
    value=$(echo $element | awk -F':' '{print $2","}')

    if [[ $value == *".node.metadata.labels"* ]]; then
      value='.node.metadata.labels."'$(echo $value | sed 's/.node.metadata.labels.//g' | sed 's/\\//g' | sed 's/,//g' )'"'
    fi

    columns+=$(echo $element | awk -F':' '{print "\""$1"\""","}')
    values+=$(echo $value)
  done
  
  columns=$(echo $columns | sed 's/,*$//g')
  values=$(echo $values | sed 's/,*$//g')

  OUT_FORMAT='['$columns'], (.[] | ['$values'])'
}

run() {
  TMP_NODE_FILE=$(mktemp /tmp/kubectl-wider.XXXXXX)
  TMP_POD_FILE=$(mktemp /tmp/kubectl-wider.XXXXXX)

  get_nodes $TMP_NODE_FILE
  get_pods $TMP_POD_FILE $@
  jq --slurpfile nodes $TMP_NODE_FILE '. |= map(.spec.nodeName as $nodeName | .node=($nodes[][] | select(.metadata.name == $nodeName)))' $TMP_POD_FILE \
    | jq -r "$OUT_FORMAT | @tsv" \
    | column -ts $'\t'

  rm $TMP_NODE_FILE
  rm $TMP_POD_FILE
}

main() {
  if [[ -z "${KUBECTL:-}" ]]; then
    if hash kubectl 2>/dev/null; then
      KUBECTL=kubectl
    elif hash kubectl.exe  2>/dev/null; then
      KUBECTL=kubectl.exe
    else
      echo >&2 "kubectl is not installed"
      exit 1
    fi
  fi

  check_command "jq"
  check_command "column"

  for arg do
    shift
    [[ "$arg" == "-o" ]] && continue
    if [[ "$arg" =~ "custom" ]]; then
      set_out_format $arg
      continue
    fi
    set -- "$@" "$arg"
  done

  run "$@"
}

main "$@"
